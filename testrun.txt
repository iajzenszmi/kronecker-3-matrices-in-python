(base) ian@ian-Latitude-E7440:~$ python3  kronecker.py
(base) ian@ian-Latitude-E7440:~$ nano kronecker.py
(base) ian@ian-Latitude-E7440:~$ python3  kronecker.py
[[  0.   0.  40.  45.   0.   0.  80.  90.]
 [  0.   0.  50.  55.   0.   0. 100. 110.]
 [ 48.  54.  56.  63.  96. 108. 112. 126.]
 [ 60.  66.  70.  77. 120. 132. 140. 154.]
 [  0.   0. 120. 135.   0.   0. 160. 180.]
 [  0.   0. 150. 165.   0.   0. 200. 220.]
 [144. 162. 168. 189. 192. 216. 224. 252.]
 [180. 198. 210. 231. 240. 264. 280. 308.]]
(base) ian@ian-Latitude-E7440:~$ cat kronecker.py
import numpy as np

def kronecker_product(A, B):
    """
    Compute the Kronecker product of two matrices A and B.
    """
    # Get the shapes of A and B
    a_rows, a_cols = A.shape
    b_rows, b_cols = B.shape
    
    # Initialize the result matrix with zeros
    result = np.zeros((a_rows * b_rows, a_cols * b_cols))
    
    # Compute the Kronecker product
    for i in range(a_rows):
        for j in range(a_cols):
            result[i * b_rows:(i + 1) * b_rows, j * b_cols:(j + 1) * b_cols] = A[i, j] * B

    return result

# Define three example matrices
matrix1 = np.array([[1, 2], [3, 4]])
matrix2 = np.array([[0, 5], [6, 7]])
matrix3 = np.array([[8, 9], [10, 11]])

# Compute the Kronecker product iteratively
kronecker_result = kronecker_product(matrix1, matrix2)
kronecker_result = kronecker_product(kronecker_result, matrix3)

print(kronecker_result)
(base) ian@ian-Latitude-E7440:~$ sloccount kronecker.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/kronecker.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
15      top_dir         python=15


Totals grouped by language (dominant language first):
python:          15 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 15
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.03)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.05 (0.65)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.04
Total Estimated Cost to Develop                           = $ 329
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ 

